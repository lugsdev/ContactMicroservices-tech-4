#!/bin/bash

# Script para deploy dos microservi√ßos no Kubernetes

set -e

echo "üöÄ Iniciando deploy dos microservi√ßos de contatos no Kubernetes..."

# Definir vari√°veis
NAMESPACE="contact-microservices"
KUBECTL_CMD="kubectl"

# Verificar se kubectl est√° dispon√≠vel
if ! command -v $KUBECTL_CMD &> /dev/null; then
    echo "‚ùå kubectl n√£o encontrado. Instale o kubectl primeiro."
    exit 1
fi

# Verificar conex√£o com o cluster
echo "üîç Verificando conex√£o com o cluster Kubernetes..."
if ! $KUBECTL_CMD cluster-info &> /dev/null; then
    echo "‚ùå N√£o foi poss√≠vel conectar ao cluster Kubernetes."
    echo "   Verifique se o kubectl est√° configurado corretamente."
    exit 1
fi

echo "‚úÖ Conectado ao cluster Kubernetes"

# Fun√ß√£o para aplicar manifesto com verifica√ß√£o
apply_manifest() {
    local file=$1
    local description=$2
    
    echo "üì¶ Aplicando $description..."
    if $KUBECTL_CMD apply -f "$file"; then
        echo "‚úÖ $description aplicado com sucesso"
    else
        echo "‚ùå Erro ao aplicar $description"
        exit 1
    fi
    echo ""
}

# 1. Criar namespace
apply_manifest "namespace.yaml" "Namespace"

# 2. Aplicar ConfigMaps
apply_manifest "configmap.yaml" "ConfigMaps"

# 3. Aplicar Secrets
apply_manifest "secrets.yaml" "Secrets"

# 4. Deploy SQL Server
apply_manifest "sqlserver.yaml" "SQL Server"

# 5. Deploy RabbitMQ
apply_manifest "rabbitmq.yaml" "RabbitMQ"

# 6. Aguardar SQL Server e RabbitMQ ficarem prontos
echo "‚è≥ Aguardando SQL Server ficar pronto..."
$KUBECTL_CMD wait --for=condition=available --timeout=300s deployment/sqlserver -n $NAMESPACE

echo "‚è≥ Aguardando RabbitMQ ficar pronto..."
$KUBECTL_CMD wait --for=condition=available --timeout=300s deployment/rabbitmq -n $NAMESPACE

# 7. Deploy dos microservi√ßos
apply_manifest "contact-create-api.yaml" "ContactCreate API"
apply_manifest "contact-read-api.yaml" "ContactRead API"
apply_manifest "contact-update-api.yaml" "ContactUpdate API"
apply_manifest "contact-delete-api.yaml" "ContactDelete API"

# 8. Aguardar microservi√ßos ficarem prontos
echo "‚è≥ Aguardando microservi√ßos ficarem prontos..."
$KUBECTL_CMD wait --for=condition=available --timeout=300s deployment/contact-create-api -n $NAMESPACE
$KUBECTL_CMD wait --for=condition=available --timeout=300s deployment/contact-read-api -n $NAMESPACE
$KUBECTL_CMD wait --for=condition=available --timeout=300s deployment/contact-update-api -n $NAMESPACE
$KUBECTL_CMD wait --for=condition=available --timeout=300s deployment/contact-delete-api -n $NAMESPACE

# 9. Aplicar Ingress (opcional)
if [ -f "ingress.yaml" ]; then
    echo "üåê Aplicando Ingress..."
    if $KUBECTL_CMD apply -f "ingress.yaml"; then
        echo "‚úÖ Ingress aplicado com sucesso"
    else
        echo "‚ö†Ô∏è  Aviso: Erro ao aplicar Ingress (pode ser normal se o Ingress Controller n√£o estiver instalado)"
    fi
    echo ""
fi

# 10. Mostrar status dos deployments
echo "üìä Status dos deployments:"
$KUBECTL_CMD get deployments -n $NAMESPACE

echo ""
echo "üìä Status dos services:"
$KUBECTL_CMD get services -n $NAMESPACE

echo ""
echo "üìä Status dos pods:"
$KUBECTL_CMD get pods -n $NAMESPACE

echo ""
echo "üéâ Deploy conclu√≠do com sucesso!"
echo ""
echo "üìã Comandos √∫teis:"
echo "   Ver logs: kubectl logs -f deployment/<deployment-name> -n $NAMESPACE"
echo "   Ver pods: kubectl get pods -n $NAMESPACE"
echo "   Deletar tudo: kubectl delete namespace $NAMESPACE"
echo ""
echo "üåê URLs de acesso (se Ingress estiver configurado):"
echo "   API: https://api.contatos.com"
echo "   RabbitMQ Management: https://rabbitmq.contatos.com"

