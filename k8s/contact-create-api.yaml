apiVersion: apps/v1
kind: Deployment
metadata:
  name: contact-create-api
  namespace: contactmicroservices
  labels:
    app: contact-create-api
    app.kubernetes.io/name: contact-create-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: contact-system
    app.kubernetes.io/managed-by: kubectl
    tier: backend
    operation: create
  annotations:
    description: "Microserviço responsável pela criação de contatos"
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: contact-create-api
  template:
    metadata:
      labels:
        app: contact-create-api
        app.kubernetes.io/name: contact-create-api
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: contact-system
        tier: backend
        operation: create
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: contact-create-api
        image: ghcr.io/zennbyte/contact-create-api:latest
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: ASPNETCORE_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: contact-config
              key: ASPNETCORE__ENVIRONMENT
        - name: ASPNETCORE_URLS
          valueFrom:
            configMapKeyRef:
              name: contact-config
              key: ASPNETCORE__URLS
        - name: ConnectionStrings__DefaultConnection
          valueFrom:
            secretKeyRef:
              name: contact-secrets
              key: CONNECTIONSTRINGS__DEFAULTCONNECTION
        - name: RabbitMQ__HostName
          valueFrom:
            configMapKeyRef:
              name: contact-config
              key: RABBITMQ__HOSTNAME
        - name: RabbitMQ__Port
          valueFrom:
            configMapKeyRef:
              name: contact-config
              key: RABBITMQ__PORT
        - name: RabbitMQ__UserName
          valueFrom:
            configMapKeyRef:
              name: contact-config
              key: RABBITMQ__USERNAME
        - name: RabbitMQ__Password
          valueFrom:
            secretKeyRef:
              name: contact-secrets
              key: RABBITMQ__PASSWORD
        - name: RabbitMQ__VirtualHost
          valueFrom:
            configMapKeyRef:
              name: contact-config
              key: RABBITMQ__VIRTUALHOST
        - name: RabbitMQ__ExchangeName
          valueFrom:
            configMapKeyRef:
              name: contact-config
              key: RABBITMQ__EXCHANGENAME
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /api/contact/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/contact/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
apiVersion: v1
kind: Service
metadata:
  name: contact-create-api-service
  namespace: contact-microservices
  labels:
    app: contact-create-api
    app.kubernetes.io/name: contact-create-api-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: service
    app.kubernetes.io/part-of: contact-system
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Service para o microserviço ContactCreate.API"
spec:
  selector:
    app: contact-create-api
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

